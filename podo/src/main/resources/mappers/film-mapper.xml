<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="filmMapper">
	
	<resultMap type="Film" id="filmResultSet">
		<id property="id" column="id"/>
		<result property="titleKor" column="title_kor"/>
		<result property="titleEng" column="title_eng"/>
		<result property="director" column="director"/>
		<result property="releaseYear" column="release_year"/>
		<result property="productionCountry" column="production_country"/>
		<result property="productionStatus" column="production_status"/>
		<result property="genre" column="name"/>
		<result property="poster" column="change_name"/>
	</resultMap>
	
	<resultMap type="Film" id="recommendFilm">
		<id property="id" column="film_id"/>
		<result property="titleKor" column="title_kor"/>
		<result property="avgStarRating" column="avg_star"/>
		<result property="releaseYear" column="release_year"/>
		<result property="genreId" column="genre_id"/>
		<result property="genre" column="name"/>
		<result property="poster" column="change_name"/>
	</resultMap>
	
	<select id="getListCount" resultType="_int">
		select count(*)
		from tb_film
	</select>
	
	<select id="selectKeywordFilmListCount" resultType="_int">
		select count(*)
		from tb_film f
		join tb_genre g on (f.genre_id = g.id)
		where title_kor like '%'||#{keyword}||'%'
		   or title_eng like '%'||#{keyword}||'%'
	</select>
	
	<select id="selectKeywordFilmList" resultMap="filmResultSet">
		select f.*, g.name, fi.change_name
		from tb_film f
		join tb_genre g on (f.genre_id = g.id)
		left outer join tb_detail_film df on (df.film_id = f.id)
		left outer join tb_film_image fi on (df.id = fi.dfilm_id)
		where title_kor like '%'||#{keyword}||'%'
		   or title_eng like '%'||#{keyword}||'%'
	</select>
	
	<select id="selectFilterFilmListCount" resultType="_int">
		<choose>
			<when test='userId == "0" or userId == null or saw == "all" or saw == null'>
				select count(*)
	      from tb_film f
	      join tb_genre g on (f.genre_id = g.id)
	      left outer join tb_detail_film df on (df.film_id = f.id)
	      left outer join tb_film_image fi on (df.id = fi.dfilm_id)
 				join vi_film_avg_star fas on (fas.film_id = f.id)
			</when>
			<otherwise>
				select count(*)
				from (select f.*, g.name, fi.change_name, NVL(rf.saw, 'N') as saw, NVL(rf.member_id, null) as mem, fas.avg_star
				      from tb_film f
				      join tb_genre g on (f.genre_id = g.id)
				      left outer join tb_detail_film df on (df.film_id = f.id)
				      left outer join tb_film_image fi on (df.id = fi.dfilm_id)
				      left outer join tb_rating_film rf on (rf.film_id = f.id)
      				join vi_film_avg_star fas on (fas.film_id = f.id)) t
			</otherwise>
		</choose>
		<where>
			<if test='releaseYear != "all" and releaseYear != null and releaseYear != ""'>
				release_year = #{ releaseYear }
			</if>
			<if test='productionCountry != "all" and productionCountry != null and productionCountry != ""'>
				and production_country = #{ productionCountry }
			</if>
			<if test='genreId != "0" and genreId != null and genreId != ""'>
				and f.genre_id = #{ genreId }
			</if>
			<if test='saw != "all" and saw != null and saw != "" and userId != "0" and userId != null'>
				<choose>
					<when test='saw == "show"'>
						and saw = 'Y'
					</when>
					<otherwise>
						and saw = 'N'
					</otherwise>
				</choose>
				and mem = #{ userId }
			</if>
		</where>
		<!-- count만 가져오기 때문에 order 따로 해주지 않음 -->
	</select>
	
	<select id="selectFilterFilmList" resultMap="filmResultSet">
		<choose>
			<when test='userId == "0" or userId == null or saw == "all" or saw == null'>
				select f.*, g.name, fi.change_name, nvl(fas.avg_star, 0) as avg_star
	      from tb_film f
	      join tb_genre g on (f.genre_id = g.id)
	      left outer join tb_detail_film df on (df.film_id = f.id)
	      left outer join tb_film_image fi on (df.id = fi.dfilm_id)
 				join vi_film_avg_star fas on (fas.film_id = f.id)
			</when>
			<otherwise>
				select t.*
				from (select f.*, g.name, fi.change_name, NVL(rf.saw, 'N') as saw, NVL(rf.member_id, null) as mem, fas.avg_star
				      from tb_film f
				      join tb_genre g on (f.genre_id = g.id)
				      left outer join tb_detail_film df on (df.film_id = f.id)
				      left outer join tb_film_image fi on (df.id = fi.dfilm_id)
				      left outer join tb_rating_film rf on (rf.film_id = f.id)
      				join vi_film_avg_star fas on (fas.film_id = f.id)) t
			</otherwise>
		</choose>
		<where>
			<if test='releaseYear != "all" and releaseYear != null and releaseYear != ""'>
				release_year = #{ releaseYear }
			</if>
			<if test='productionCountry != "all" and productionCountry != null and productionCountry != ""'>
				and production_country = #{ productionCountry }
			</if>
			<if test='genreId != "0" and genreId != null and genreId != ""'>
				and f.genre_id = #{ genreId }
			</if>
			<if test='saw != "all" and saw != null and saw != "" and userId != "0" and userId != null'>
				<choose>
					<when test='saw == "show"'>
						and saw = 'Y'
					</when>
					<otherwise>
						and saw = 'N'
					</otherwise>
				</choose>
				and mem = #{ userId }
			</if>
		</where>
		<if test='order != "all" and order != null and order != ""'>
			<choose>
				<when test='order == "filmRatingDesc"'>
					order by avg_star desc
				</when>
				<otherwise>
					
				</otherwise>
			</choose>
		</if>
	</select>
	
	<select id="selectFilterFilmMap" resultMap="filmResultSet">
		select f.*, g.name, l.user_id
		from tb_film f
		left outer join tb_genre g on (f.genre_id = g.id)
    left outer join tb_like l on (l.target_id = f.id)
		where user_id = #{ mid }
		<if test='film.releaseYear != "all" and film.releaseYear != null'>
			and release_year = #{ film.releaseYear }
		</if>
		<if test='film.productionCountry != "all" and film.productionCountry != null'>
			and production_country = #{ film.productionCountry }
		</if>
		<if test='film.genreId != "0" and film.genreId != null'>
			and f.genre_id = #{ film.genreId }
		</if>
	</select>
	
	<select id="selectAllGenreList" resultType="Genre">
		select g.*
		from (select distinct genre_id
		      from tb_film) f
		join tb_genre g on (g.id = f.genre_id)
		order by genre_id asc
	</select>
	
	<select id="getFilmListCount" resultType="_int">
		select count(*)
		from tb_film
	</select>
	
	<select id="selectFilmList" resultMap="filmResultSet">
		select *
		from tb_film
		join tb_genre using(id)
		order by id
	</select>
	
	<insert id="insertFilm">
		insert into tb_film
		values(seq_film_id.nextval, #{ titleKor }, #{ titleEng }, #{ director }, 
			   #{ releaseYear }, #{ productionCountry }, #{ productionStatus }, #{ genreId })
	</insert>
	
	<select id="selectFilm" resultMap="filmResultSet">
		select * 
		from tb_film
		where id=#{id}
	</select>
	
	<select id="selectLikedFilmCount" resultType="_int">
		select count(*)
		from tb_film f
		join tb_like l on (f.id = target_id)
		where user_id = #{id}
			and type = 1
	</select>
	
	<select id="selectLikedFilmList" resultMap="filmResultSet">
		select f.*, g.name
		from tb_film f
		join tb_like l on (f.id = target_id)
		join tb_genre g on (f.genre_id = g.id)
		where user_id = #{id}
		  and type = 1
    order by l.id asc
	</select>
	
	<select id="selectPreferredGenreFilmList" resultMap="recommendFilm">
		<![CDATA[
			select film_id, title_kor, avg_star, release_year, genre_id, name, change_name
			from (select * from vi_film_avg_star) a
			where a.genre_id in (select r.genre
			                    from (select genre, prefer, row_number() over (order by prefer desc) as rank
			                          from (select g.id as genre, count(*) as prefer
			                                from tb_like l
			                                join tb_film f on (f.id = l.target_id)
			                                join tb_genre g on (f.genre_id = g.id)
			                                where user_id = #{id}
			                                group by g.id)) r
			                    where r.rank = 1)
			  and rownum <= 5
			union
			select film_id, title_kor, avg_star, release_year, genre_id, name, change_name
			from (select * from vi_film_avg_star) a
			where a.genre_id in (select r.genre
			                    from (select genre, prefer, row_number() over (order by prefer desc) as rank
			                          from (select g.id as genre, count(*) as prefer
			                                from tb_like l
			                                join tb_film f on (f.id = l.target_id)
			                                join tb_genre g on (f.genre_id = g.id)
			                                where user_id = #{id}
			                                group by g.id)) r
			                    where r.rank = 2)
			  and rownum <= 5
			union
			select film_id, title_kor, avg_star, release_year, genre_id, name, change_name
			from (select * from vi_film_avg_star) a
			where a.genre_id in (select r.genre
			                    from (select genre, prefer, row_number() over (order by prefer desc) as rank
			                          from (select g.id as genre, count(*) as prefer
			                                from tb_like l
			                                join tb_film f on (f.id = l.target_id)
			                                join tb_genre g on (f.genre_id = g.id)
			                                where user_id = #{id}
			                                group by g.id)) r
			                    where r.rank = 3)
			  and rownum <= 5
			order by genre_id asc, avg_star desc
		]]>
	</select>
	
	<select id="selectAllCountryList" resultType="string">
		select distinct production_country
		from tb_film
		order by production_country asc
	</select>
	
	<select id="selectAllReleaseYearList" resultType="string">
		select distinct release_year
		from tb_film
		order by release_year asc
	</select>
	
	<select id="selectNewFilms" resultMap="recommendFilm">
		<![CDATA[
            select rownum, r.*
			from (select * from vi_film_avg_star fas
                    JOIN TB_FILM F ON (fas.FILM_ID = F.ID)
			      where fas.release_year = to_char(sysdate, 'yyyy')
			      order by fas.film_id desc) r
			where rownum <= 10
		]]>
	</select>
	
	<insert id="insertInitDetailFilm">
		insert into tb_detail_film
		values(seq_dfilm_id.nextval, null, null, null, null, 'Y', sysdate, #{ memberId }, seq_film_id.currval)
	</insert>
	
	<insert id="insertFilmImage">
		insert into tb_film_image
		<choose>
			<when test="changeName != null">
				values(seq_fimage_id.nextval, 1, #{ changeName }, seq_dfilm_id.currval)
			</when>
			<otherwise>
				values(seq_fimage_id.nextval, 1, null, seq_dfilm_id.currval)
			</otherwise>
		</choose>
	</insert>
	
</mapper>