<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="memberMapper">
	
	<resultMap type="Member" id="memberResultSet">
		<id property="id" column="id"/>
		<result property="image" column="image"/>
		<result property="email" column="email"/>
		<result property="password" column="pwd"/>
		<result property="nickname" column="nickname"/>
		<result property="status" column="status"/>
		<result property="enrollDate" column="enroll_date"/>
		<result property="modifyDate" column="modify_date"/>
		<result property="googleId" column="google_id"/>
		<result property="kakaoId" column="kakao_id"/>
		<result property="autho" column="autho"/>
		<result property="blackName" column="blackName"/>
		<result property="blackDate" column="blackDate"/>
		<result property="block" column="block"/>
		<result property="reportCount" column="report_count"/>
		<result property="premium" column="premium"/>
	</resultMap>
	
	<insert id="insertMember">
		insert into tb_member values(seq_member_id.nextval, #{image}, #{email}, #{password}, #{nickname}, default, sysdate, sysdate, null, null, default, default)
	</insert>
	
	<select id="idCheck" resultType="_int">
		select count(*)
		from tb_member
		where email=#{email} and status='Y'
	</select>
	
	<select id="nickCheck" resultType="_int">
		select count(*)
		from tb_member
		where nickname=#{nick} and status='Y'
	</select>
	
	<select id="selectLoginMember" resultMap="memberResultSet">
		select *
		from tb_member
		where email = #{email}
			and status='Y'
	</select>
	
	<update id="updateMember">
		update tb_member 
		
		<if test='newPassword != null and newPassword != ""'>	<!-- 비밀번호 변경O -->
			set pwd=#{password}, modify_date=sysdate
		</if>
		
		<if test='newPassword == null or newPassword == ""'> <!-- 비밀번호 변경X -->
			set image=#{image}, email=#{email}, nickname=#{nickname}, modify_date=sysdate
		</if>
		where id=#{id} and status='Y'
	</update>
	

	<select id="selectUserPageMem" resultMap="memberResultSet">
		select *
		from tb_member
		where id=#{userId}
	</select>

	<select id="selectMemberList" resultMap="memberResultSet">
		select a.*,
		        (select case when count(b.target_id) >= 1
		                     then 'Y'
		                     else 'N'
		                     end
		          from tb_black_member b
		         where b.target_id = a.id) as block,
		        (select count(c.reported_id)
		          from tb_report c
		         where c.reported_id = a.id) as report_count
		  from tb_member a
		 order by a.id
	</select>
	
	
	<select id="selectBlackList" resultMap="memberResultSet">
		select b.id, email, nickname as blackName, blackDate
		from tb_member m
		join tb_black_member b on (m.id = b.target_id)
		where m.id = b.target_id and m.status='Y'
		order by blackDate
	</select>

	<!-- 블랙회원 해제 -->
	<delete id="deleteBlackMember">
		delete from tb_black_member
		where id = #{item}
	</delete>
	
	<!-- 블랙리스트 기능 제한 인터셉터 -->
	<select id="prohibitionBoard" resultType="_int">
		select count(*)
		from tb_black_member
		where target_id = #{bid}
	</select>
	
	<!-- 신고회원 블랙리스트로 추가 -->
	<insert id="insertBlackList">
		insert into tb_black_member values(seq_black_id.nextval, SYSTIMESTAMP, #{item})
	</insert>
	
	<!-- 블랙리스트된 회원 신고수 삭제 -->
	<delete id="deleteReport">
		delete from tb_report
		where reported_id = #{item}
	</delete>
	
	<insert id="insertPaymentInfo">
		insert into tb_payment
		values(#{impUid}, #{merchantUid}, #{applyNum}, #{paidAmount}, sysdate, #{memberId})
	</insert>
	
	<update id="updatePremiumInfo">
		update tb_member
		set premium = 'Y'
		where id = #{memberId}
	</update>
	
	<update id="exit">
		update tb_member
		set status = 'N'
		where id = #{id}
	</update>
	
	<select id="existsEmail" resultType="boolean">
		SELECT CASE WHEN count(*) > 0 THEN 1 ELSE 0 END
		FROM tb_member
		WHERE email = #{email}
	</select>
	
</mapper>